package Traitement;

import java.util.*;
import ServerSide.*;

public class HashThread implements Runnable {
    private Hashtable<String, ArrayList<Long>> player;
    private Hashtable<String, Integer> ouverture;
    private GameChess match;
    private long pos;
    private boolean arret;

    public HashThread() {// constructeur pour initialisation
        this.player = new Hashtable<String, ArrayList<Long>>();
        this.ouverture = new Hashtable<String, Integer>();
        this.match = new GameChess();
        this.pos = -1;
       this.arret = false;
    }

    public HashThread(Hashtable<String, ArrayList<Long>> pl, Hashtable<String, Integer>ouv) {// constructeur avec passage des HashTables pour initialisation
        this.player = pl;
        this.ouverture = ouv;
        match = new GameChess();
        pos = -1;
        arret = false;
    }

    public void stopThread() {
        arret = true;
    }

    public Hashtable<String, ArrayList<Long>> getPlayer() {
        return player;
    }

   public Hashtable<String, Integer> getOuverture() {
       return ouverture;
   }

    public void setGameChess(GameChess mt) {
        match = new GameChess(mt);
    }

    public void setPos(long ps) {
        pos = ps;
    }

    @Override
    public void run() {
        System.out.println("Hash Thread start");
        while (!arret) {
            // System.out.println("\tpos=>"+pos+"\n"+match.toString());
            System.out.print("");
            if (pos != -1) {
                String whitekey = match.getWhite(), blackkey = match.getBlack();
                // ajouter un element au HT player avec White player comme KEY
                if (player.containsKey("W " + whitekey))
                    player.get("W " + whitekey).add(pos);
                else
                    player.put("W " + whitekey, new ArrayList<Long>(Arrays.asList(pos)));

                // ajouter un element au HT player avec Black player comme KEY
                if (player.containsKey("B " + blackkey))
                    player.get("B " + blackkey).add(pos);
                else
                    player.put("B " + blackkey, new ArrayList<Long>(Arrays.asList(pos)));

                // ajouter un element avec ouverture comme KEY
                if (ouverture.contains(match.getOuverture())) {
//                    ouverture.get()
                     } else
                    ouverture.put(match.getOuverture(),1);

                match = new GameChess();
                setPos(-1);
            }
        }
        System.out.println("\nHash Thread finish");
    }

    private String getEco(String line) {
        return line.substring(3, 5).trim();
    }
}
