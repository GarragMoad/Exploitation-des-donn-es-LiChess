package Traitement;

import ServerSide.*;

import java.io.*;
import java.nio.file.*;
import java.util.*;
import java.util.regex.*;
import java.util.stream.Stream;

public class HashT {
    private Hashtable<String, ArrayList<Long>> player;
    private Hashtable<String, Integer> ouverture;
    private ArrayList<Coup> coup;
    private int nbMatches;
    private HashThread gameRunnable;
    private Thread gameThread;
    private final String NAME_FILE = "lichess_db_standard_rated_2013-01.pgn";

    /*       // utilizzare questa per saltare ad una linea specifica
             try (Stream<String> all_lines =
             Files.lines(Paths.get(NAME_FILE))) {
             String specific_line_15 = all_lines.skip(16).findFirst().get();
             System.out.println(specific_line_15);
             } catch (IOException e) {
             e.printStackTrace();
             }
    */
    public HashT() {
        player = new Hashtable<String, ArrayList<Long>>();
        ouverture = new Hashtable<String, Integer>();
        coup=new ArrayList<>();
        this.nbMatches = 0;
        gameRunnable = new HashThread(player, ouverture);
        gameThread = new Thread(gameRunnable);
    }
    public Hashtable<String, Integer> getOuverture() {
        return ouverture;
    }
    public int getNbMatches() {
        return nbMatches;
    }

    public void setNbMatches(int nbMatches) {
        this.nbMatches = nbMatches;
    }
    public Hashtable<String, ArrayList<Long>> getPlayer() {
        return player;
    }

    public ArrayList<Coup> getCoup() {
        return coup;
    }

    public void lecture() {
        long positionPartie=0;
        gameThread.start();
        long begin = new Date().getTime();
        try (BufferedReader d = new BufferedReader(new FileReader(NAME_FILE))) {
            boolean t = true;
            long count = 1;//variable pour la position dans le fichier

            GameChess pl = new GameChess();
            while (t) {
                try {
                    String c = d.readLine();
                    if (c != null) {
                        Pattern pattern = Pattern.compile("event ", Pattern.CASE_INSENSITIVE);
                        Matcher matcher = pattern.matcher(c);
                        boolean matchFound = matcher.find();
                        if (matchFound) {
                            positionPartie=count;
                        }
                        pattern = Pattern.compile("white ", Pattern.CASE_INSENSITIVE);
                        matcher = pattern.matcher(c);
                        matchFound = matcher.find();
                        if (matchFound) {
                            pl.setWhite(getString(c));
                        }

                        pattern = Pattern.compile("black ", Pattern.CASE_INSENSITIVE);
                        matcher = pattern.matcher(c);
                        matchFound = matcher.find();
                        if (matchFound) {
                            // System.out.println(c);
                            pl.setBlack(getString(c));
                        }
                        pattern = Pattern.compile("opening", Pattern.CASE_INSENSITIVE);
                        matcher = pattern.matcher(c);
                        matchFound = matcher.find();
                        if (matchFound) {
                            // System.out.println(c);
                            pl.setOuverture(getString(c));
                        }
                        pattern = Pattern.compile("1. ", Pattern.CASE_INSENSITIVE);
                        matcher = pattern.matcher(c);
                        matchFound = matcher.find();
                        if (matchFound) {
                            pl.setEtap(c);
                            coup.add(new Coup(c,positionPartie));
                            gameRunnable.setGameChess(pl);
                            gameRunnable.setPos(positionPartie);
                            nbMatches++;
                            pl = new GameChess();
                        }
                        count++;
                    } else
                        t = false;
                } catch (IllegalStateException e) {
                    e.printStackTrace();
                }
            }
            try {
                Thread.sleep(1000);
                gameRunnable.stopThread();
//                if (gameThread.isInterrupted())
//                    System.out.println("\tGameThread isn't Alive, Destroyed before.");
//                else {
//                    System.out.println("\tGameThread Dead.");
//                    gameThread.interrupt();
//                }
                player = gameRunnable.getPlayer();
                ouverture = gameRunnable.getOuverture();
            } catch (Exception exc) {
                System.out.println("Thread Exception " + exc.getMessage());
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        long end = new Date().getTime();
        System.out.println("\nLetture del file : " + NAME_FILE + " in (" + (end - begin) + "ms)\n");
    }

    private String getString(String line) {
        String result = "";
        boolean t = false;
        for (int i = 0 ; i < line.length() ; i++) {
            if (line.charAt(i) == '"') {
                t = !t;
            } else if (t)
                result = result.concat("" + line.charAt(i));
        }
        return result;
    }

    String getLigne(long pos) {
        String specific_line = null;
        try (Stream<String> all_lines = Files.lines(Paths.get("lichess_db_standard_rated_2013-01.pgn"))) {
            specific_line = all_lines.skip(pos - 1).findFirst().get();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return specific_line;
    }

}