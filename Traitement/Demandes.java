package Traitement;

import ServerSide.*;

import java.util.*;
import java.util.stream.Stream;
import java.nio.file.*;
import java.io.*;
import java.util.regex.*;

public class Demandes {
    private HashT ObjHash;
    private Hashtable<String, ArrayList<Long>> joueur;
    private Hashtable<String, Integer> ouverture;
    private ArrayList<Coup> coupParties;
    private String[] ouvPj;

    public Demandes() {
        this.ObjHash = new HashT();
        this.ObjHash.lecture();
        this.joueur = ObjHash.getPlayer();
        this.ouverture=ObjHash.getOuverture();
        this.coupParties=ObjHash.getCoup();
        this.ouvPj = new String[5];
    }

    public Hashtable<String, ArrayList<Long>> getJoueurs() {
        return joueur;
    }

    public HashT getObjHash() {
        return ObjHash;
    }

    public void setObjHash(HashT objHash) {
        ObjHash = objHash;
    }


    private String getElement(long pos) {
        String specific_line = null;
        try (Stream<String> all_lines = Files.lines(Paths.get("lichess_db_standard_rated_2013-01.pgn"))) {
            specific_line = all_lines.skip(pos - 1).findFirst().get();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return specific_line;
    }

    private String getPartieComplete(long pos) {
        String s = "";
        for (long i = pos ; i < pos + 18 ; i++) {
            s += getElement(i) + "\n";
        }
        return s;
    }

    public String VisualiserPartie(String Joueur1, String Joueur2, String Temps) {
        String out = "";
        String sortie = "";
        ArrayList<String> Tab = new ArrayList<>();
        ArrayList<Long> positions = joueur.get("W " + Joueur1);
        System.out.println(positions.toString());
        for (int i = 0 ; i < positions.size() ; i++) {
            Tab.add(getPartieComplete(positions.get(i)));
//            System.out.println(Tab.get(i));
        }
        Pattern VerifBlack = Pattern.compile(Joueur2, Pattern.CASE_INSENSITIVE);
        Pattern VerifWhite = Pattern.compile(Joueur1, Pattern.CASE_INSENSITIVE);
        Pattern VerifTemps = Pattern.compile(Temps, Pattern.CASE_INSENSITIVE);
        for (int i = 0 ; i < Tab.size() ; i++) {
            Matcher matcherWhite = VerifWhite.matcher(Tab.get(i));
            Matcher matcherBlack = VerifBlack.matcher(Tab.get(i));
            Matcher matcherTemps = VerifTemps.matcher(Tab.get(i));
            if (matcherWhite.find() && matcherBlack.find() && matcherTemps.find())
                out = Tab.get(i);
        }
//        System.out.println(out);
//        sortie=out.substring(out.indexOf("1. "),out.length());
        int i = out.indexOf("1. ");
        boolean t = true;
        while (i < out.length() && t) {
            if ((int) out.charAt(i) > 33 && (int) out.charAt(i) < 125)
                sortie += out.charAt(i);
            i++;
        }
        return sortie;
    }

    public ArrayList<String> plusCourtesParties() {
        TriTab cp = new TriTab(coupParties);
        cp.start();
        try {
            cp.join();
        }catch (Exception e){
            e.printStackTrace();
        }
        ArrayList<String> Tab = new ArrayList<>();
        for (int i = 0 ; i < cp.getCoupCourt().size() ; i++) {
            Tab.add(getPartieComplete(cp.getCoupCourt().get(i).getPositionFile()));
        }
        return Tab;
    }

    public ArrayList<String> ouverturePlusJouer(){
        Hashtable<String,Integer> clonated= (Hashtable<String, Integer>) ouverture.clone();
        ArrayList<String>maxi=new ArrayList<>(5);
        String mx="";
        for (Map.Entry<String, Integer> entry : clonated.entrySet()) {
            String key = entry.getKey();
            mx = key;
            break;
        }
        for (int i = 0 ; i < 5 ; i++) {
            for (Map.Entry<String, Integer> entry : clonated.entrySet()) {
                String key = entry.getKey();
                int val=entry.getValue();
                if(clonated.get(mx)<val)
                    mx=key;
            }
            maxi.add(mx+"\n");
            clonated.replace(mx,0);
            for (Map.Entry<String, Integer> entry : clonated.entrySet()) {
                String key = entry.getKey();
                mx = key;
                break;
            }
        }
        return maxi;
    }

    public ArrayList<String> getPartiesJoueur(String j) {
        ArrayList<Long> positions = joueur.get("W " + j);
        positions.addAll(joueur.get("B " + j));
        ArrayList<String> out = new ArrayList<>();
        for (int i = 0 ; i < positions.size() ; i++) {
            out.add(getPartieComplete(positions.get(i)));
        }
        return out;
    }


}